// lib/services/story-generation.ts
import { createServiceRoleClient } from '@/lib/supabase/admin';
import OpenAI from 'openai';

interface StoryData {
  theme: string;
  characters: Array<{ name: string; description: string }>;
  language: string;
  voice: string;
  duration?: string;
  uploadedImages?: string[];
  targetAge?: string; // New age group field
  customPrompt?: string; // Optional custom story elements
}

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function generateStoryAsync(storyId: string, storyData: StoryData) {
  const supabase = createServiceRoleClient();
  
  console.log('[Story Generation] Starting generation for story:', storyId);
  
  try {
    // Step 1: Update status to generating
    await updateStoryStatus(storyId, 'generating', 10, 'story-generation');
    
    // Generate story text using OpenAI (replaces simulation)
    const storyText = await generateStoryText(storyData);
    await updateStoryStatus(storyId, 'generating', 50, 'audio-generation');

    // Generate audio using ElevenLabs
    const audioUrl = await generateAudio(storyText, storyData.voice);
    await updateStoryStatus(storyId, 'generating', 80, 'image-generation');

    // Generate additional illustrations if needed
    await updateStoryStatus(storyId, 'generating', 95, 'finalizing');

    // Final step: Save completed story
    await delay(2000);
    await supabase
      .from('stories')
      .update({
        text_content: storyText,
        audio_url: audioUrl,
        generation_status: 'completed',
        generation_progress: 100,
        current_step: 'completed'
      })
      .eq('id', storyId);

    console.log('[Story Generation] Completed story generation for:', storyId);

  } catch (error: any) {
    console.error('[Story Generation] Error generating story:', error);
    await supabase
      .from('stories')
      .update({
        generation_status: 'error',
        error_message: error.message || 'Unknown error occurred during generation',
        current_step: 'error'
      })
      .eq('id', storyId);
  }
}

async function generateStoryText(storyData: StoryData): Promise<string> {
  console.log('[Story Generation] Generating story text with OpenAI...');
  
  try {
    const prompt = buildStoryPrompt(storyData);
    
    const completion = await openai.chat.completions.create({
      model: "gpt-4-turbo-preview", // or "gpt-3.5-turbo" for faster/cheaper generation
      messages: [
        {
          role: "system",
          content: getSystemPrompt(storyData.language, storyData.targetAge)
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: getMaxTokensForDuration(storyData.duration, storyData.targetAge),
      temperature: 0.7, // Creative but not too random
      top_p: 0.9,
      frequency_penalty: 0.1,
      presence_penalty: 0.1
    });

    const generatedStory = completion.choices[0]?.message?.content;
    
    if (!generatedStory) {
      throw new Error('No story content generated by OpenAI');
    }

    console.log('[Story Generation] OpenAI story generated successfully');
    return generatedStory.trim();

  } catch (error: any) {
    console.error('[Story Generation] OpenAI API Error:', error);
    
    // Fallback to template-based generation if OpenAI fails
    console.log('[Story Generation] Falling back to template generation...');
    return generateTemplateStory(storyData);
  }
}

function getSystemPrompt(language: string, targetAge?: string): string {
  const ageGroup = getAgeGroup(targetAge);
  
  const prompts = {
    en: {
      'toddler': `You are a master storyteller specializing in very simple, repetitive bedtime stories for toddlers (ages 2-4). Your stories should be:

- Extremely simple with repetitive phrases and predictable patterns
- Focus on basic concepts: colors, shapes, animals, family
- Very short sentences with simple vocabulary
- Repetitive, soothing rhythm perfect for very young children
- No complex plot - simple cause and effect
- Familiar, safe environments (home, park, farm)
- Include sounds and actions toddlers can imitate
- End with sleeping/resting themes
- Maximum 2-3 characters to avoid confusion

Format with very short paragraphs and natural pauses for a calm reading pace.`,

      'preschool': `You are a master storyteller specializing in engaging yet calming bedtime stories for preschoolers (ages 3-5). Your stories should be:

- Age-appropriate with simple vocabulary and clear storylines
- Educational with basic lessons about sharing, kindness, and friendship
- Include familiar scenarios: family, pets, neighborhood, preschool
- Simple problem-solving that children can understand
- Gentle emotions and conflicts with easy resolutions
- Interactive elements like counting, colors, or animal sounds
- Encourage imagination while staying relatable
- End peacefully to prepare for sleep

Format with clear paragraph breaks and engaging dialogue.`,

      'early-elementary': `You are a master storyteller specializing in imaginative bedtime stories for early elementary children (ages 5-7). Your stories should be:

- More complex vocabulary while remaining accessible
- Include adventure and exploration within safe boundaries
- Teach problem-solving, cooperation, and empathy
- Feature diverse characters and settings
- Include mild challenges that characters overcome through creativity
- Incorporate learning elements: nature, science, friendship
- Balance excitement with calming conclusions
- Build confidence and curiosity

Structure with engaging dialogue and descriptive but not overwhelming detail.`,

      'elementary': `You are a master storyteller creating rich, imaginative bedtime stories for elementary children (ages 6-10). Your stories should be:

- Sophisticated vocabulary and more complex narratives
- Multi-layered themes about courage, friendship, and personal growth
- Include diverse settings and cultures
- Feature meaningful conflicts and character development
- Incorporate subtle life lessons and moral reasoning
- Encourage critical thinking and empathy
- Balance adventure with emotional intelligence
- End with reflection and peaceful resolution

Create vivid scenes with engaging character interactions and thoughtful pacing.`,

      'mixed': `You are a master storyteller creating versatile bedtime stories suitable for mixed age groups (ages 3-10). Your stories should be:

- Multi-layered: simple enough for younger children, engaging for older ones
- Universal themes that resonate across age groups
- Clear, beautiful language that flows at different comprehension levels
- Visual and interactive elements for younger listeners
- Deeper meaning and character development for older children
- Inclusive scenarios that speak to various developmental stages
- Calming progression that works for all bedtime routines

Balance simplicity with richness to engage the whole family.`
    },

    id: {
      'toddler': `Anda adalah seorang pencerita ahli yang mengkhususkan diri dalam cerita pengantar tidur yang sangat sederhana dan berulang untuk balita (usia 2-4 tahun). Cerita Anda harus:

- Sangat sederhana dengan frasa berulang dan pola yang dapat diprediksi
- Fokus pada konsep dasar: warna, bentuk, hewan, keluarga
- Kalimat sangat pendek dengan kosakata sederhana
- Ritme berulang yang menenangkan sempurna untuk anak-anak sangat kecil
- Tidak ada plot kompleks - sebab dan akibat sederhana
- Lingkungan yang familiar dan aman (rumah, taman, peternakan)
- Sertakan suara dan tindakan yang bisa ditiru balita
- Berakhir dengan tema tidur/istirahat
- Maksimal 2-3 karakter untuk menghindari kebingungan

Format dengan paragraf sangat pendek dan jeda alami untuk kecepatan membaca yang tenang.`,

      'preschool': `Anda adalah seorang pencerita ahli yang mengkhususkan diri dalam cerita pengantar tidur yang menarik namun menenangkan untuk anak prasekolah (usia 3-5 tahun). Cerita Anda harus:

- Sesuai usia dengan kosakata sederhana dan alur cerita yang jelas
- Edukatif dengan pelajaran dasar tentang berbagi, kebaikan, dan persahabatan
- Sertakan skenario familiar: keluarga, hewan peliharaan, lingkungan, prasekolah
- Pemecahan masalah sederhana yang bisa dipahami anak-anak
- Emosi dan konflik lembut dengan resolusi mudah
- Elemen interaktif seperti menghitung, warna, atau suara hewan
- Dorong imajinasi sambil tetap relatable
- Berakhir dengan damai untuk persiapan tidur

Format dengan jeda paragraf yang jelas dan dialog yang menarik.`,

      'early-elementary': `Anda adalah seorang pencerita ahli yang mengkhususkan diri dalam cerita pengantar tidur yang imajinatif untuk anak-anak sekolah dasar awal (usia 5-7 tahun). Cerita Anda harus:

- Kosakata lebih kompleks namun tetap dapat diakses
- Sertakan petualangan dan eksplorasi dalam batas-batas aman
- Ajarkan pemecahan masalah, kerjasama, dan empati
- Tampilkan karakter dan setting yang beragam
- Sertakan tantangan ringan yang diatasi karakter melalui kreativitas
- Masukkan elemen pembelajaran: alam, sains, persahabatan
- Seimbangkan kegembiraan dengan kesimpulan yang menenangkan
- Bangun kepercayaan diri dan rasa ingin tahu

Struktur dengan dialog yang menarik dan detail deskriptif namun tidak berlebihan.`,

      'elementary': `Anda adalah seorang pencerita yang menciptakan cerita pengantar tidur yang kaya dan imajinatif untuk anak-anak sekolah dasar (usia 6-10 tahun). Cerita Anda harus:

- Kosakata yang canggih dan narasi yang lebih kompleks
- Tema berlapis tentang keberanian, persahabatan, dan pertumbuhan pribadi
- Sertakan setting dan budaya yang beragam
- Tampilkan konflik bermakna dan pengembangan karakter
- Masukkan pelajaran hidup yang halus dan penalaran moral
- Dorong pemikiran kritis dan empati
- Seimbangkan petualangan dengan kecerdasan emosional
- Berakhir dengan refleksi dan resolusi damai

Buat adegan yang hidup dengan interaksi karakter yang menarik dan pacing yang thoughtful.`,

      'mixed': `Anda adalah seorang pencerita ahli yang menciptakan cerita pengantar tidur serbaguna yang cocok untuk kelompok usia campuran (usia 3-10 tahun). Cerita Anda harus:

- Multi-layered: cukup sederhana untuk anak kecil, menarik untuk yang lebih besar
- Tema universal yang beresonansi di berbagai kelompok usia
- Bahasa yang jelas dan indah mengalir di berbagai tingkat pemahaman
- Elemen visual dan interaktif untuk pendengar yang lebih muda
- Makna dan pengembangan karakter yang lebih dalam untuk anak yang lebih besar
- Skenario inklusif yang berbicara pada berbagai tahap perkembangan
- Progresi yang menenangkan yang bekerja untuk semua rutinas tidur

Seimbangkan kesederhanaan dengan kekayaan untuk melibatkan seluruh keluarga.`
    }
  };

  return prompts[language as keyof typeof prompts]?.[ageGroup] || prompts.en.mixed;
}

function getAgeGroup(targetAge?: string): string {
  if (!targetAge) return 'mixed';
  
  const ageNum = parseInt(targetAge);
  
  if (ageNum >= 2 && ageNum <= 4) return 'toddler';
  if (ageNum >= 3 && ageNum <= 5) return 'preschool';
  if (ageNum >= 5 && ageNum <= 7) return 'early-elementary';
  if (ageNum >= 6 && ageNum <= 10) return 'elementary';
  
  return 'mixed';
}

function buildStoryPrompt(storyData: StoryData): string {
  const { theme, characters, language, duration, uploadedImages, targetAge, customPrompt } = storyData;
  const ageGroup = getAgeGroup(targetAge);
  
  // Build character descriptions with age-appropriate complexity
  const characterSection = buildCharacterSection(characters, ageGroup);

  // Theme-specific guidance enhanced by age group
  const themeGuidance = getEnhancedThemeGuidance(theme, ageGroup, language);

  // Duration guidance with age considerations
  const lengthGuidance = getAgeAwareLengthGuidance(duration, ageGroup);

  // Age-specific story elements
  const ageSpecificElements = getAgeSpecificElements(ageGroup, language);

  // Educational objectives by age
  const educationalObjectives = getEducationalObjectives(ageGroup, language);

  // Image context (if provided)
  const imageContext = uploadedImages && uploadedImages.length > 0
    ? `\n\nThe user has uploaded ${uploadedImages.length} image(s) for this story. While you cannot see the images, incorporate elements that would naturally fit with user-provided visual content. Consider that these might be photos of the child, family members, pets, or meaningful objects that should inspire story elements.`
    : '';

  // Custom prompt elements
  const customElements = customPrompt ? `\n\nSpecial Requirements: ${customPrompt}` : '';

  const prompt = `Create a ${theme} bedtime story with the following requirements:

**TARGET AUDIENCE**: ${getAgeGroupDescription(ageGroup, language)}
Target Age: ${targetAge || 'Mixed ages'} years old

**THEME & SETTING**: ${theme}
${themeGuidance}

**CHARACTERS**:
${characterSection}

**STORY LENGTH**: ${duration || 'medium'} story
${lengthGuidance}

**EDUCATIONAL OBJECTIVES**:
${educationalObjectives}

**AGE-SPECIFIC ELEMENTS**:
${ageSpecificElements}

**LANGUAGE**: ${language === 'id' ? 'Indonesian (Bahasa Indonesia)' : 'English'}

**STORY STRUCTURE REQUIREMENTS**:
- Start with an engaging opening appropriate for the age group
- Include ${getConflictComplexity(ageGroup)} that gets resolved
- Incorporate ${getThematicElements(ageGroup)}
- Use ${getVocabularyGuidance(ageGroup)}
- End with ${getEndingStyle(ageGroup)}
- Ensure the story flows naturally when read aloud${imageContext}${customElements}

Please write the complete story now:`;

  return prompt;
}

function buildCharacterSection(characters: Array<{ name: string; description: string }>, ageGroup: string): string {
  if (characters.length === 0) {
    const characterSuggestions = {
      'toddler': 'Create 1-2 very simple characters (like a friendly animal or family member).',
      'preschool': 'Create 1-2 relatable characters that preschoolers can identify with.',
      'early-elementary': 'Create 2-3 diverse characters with distinct but simple personalities.',
      'elementary': 'Create 2-4 well-developed characters with unique traits and motivations.',
      'mixed': 'Create 2-3 characters that appeal to different age levels.'
    };
    return characterSuggestions[ageGroup] || characterSuggestions.mixed;
  }

  const characterComplexity = {
    'toddler': 'Keep character roles very simple and clear.',
    'preschool': 'Give characters clear, simple personality traits.',
    'early-elementary': 'Develop characters with relatable problems and solutions.',
    'elementary': 'Create characters with depth, growth, and meaningful interactions.',
    'mixed': 'Balance character complexity to engage all age levels.'
  };

  return `Characters to include:
${characters.map((char, i) => `${i + 1}. ${char.name}: ${char.description}`).join('\n')}

Make ${characters[0]?.name || 'the main character'} the protagonist of the story.
${characterComplexity[ageGroup] || characterComplexity.mixed}`;
}

function getEnhancedThemeGuidance(theme: string, ageGroup: string, language: string): string {
  const baseThemes = {
    'adventure': {
      'toddler': 'Create a very simple, safe adventure like exploring the backyard or visiting grandparents.',
      'preschool': 'Include gentle exploration with familiar adults, discovering something wonderful nearby.',
      'early-elementary': 'Feature age-appropriate adventure with mild challenges and teamwork.',
      'elementary': 'Create exciting but safe adventures with problem-solving and character growth.',
      'mixed': 'Balance simple exploration with engaging discovery suitable for all ages.'
    },
    'fantasy': {
      'toddler': 'Include simple magic like talking animals or toys that come to life.',
      'preschool': 'Feature friendly magical creatures and simple enchanted objects.',
      'early-elementary': 'Create magical worlds with clear rules and helpful magical friends.',
      'elementary': 'Develop rich fantasy settings with meaningful magical systems and quests.',
      'mixed': 'Layer simple magic with deeper fantasy elements for different comprehension levels.'
    },
    'calming bedtime': {
      'toddler': 'Focus on bedtime routines, sleepy animals, and peaceful night sounds.',
      'preschool': 'Include gentle nighttime adventures that end with sleepiness.',
      'early-elementary': 'Create peaceful scenarios that naturally lead to rest and reflection.',
      'elementary': 'Develop calming narratives with emotional resolution and tranquility.',
      'mixed': 'Weave universal bedtime themes that comfort all age groups.'
    },
    'educational': {
      'toddler': 'Teach basic concepts: colors, numbers, animal sounds, family members.',
      'preschool': 'Incorporate learning about nature, sharing, and simple social skills.',
      'early-elementary': 'Include science concepts, problem-solving, and cultural awareness.',
      'elementary': 'Weave in complex learning about history, science, and emotional intelligence.',
      'mixed': 'Layer educational content from basic to complex for multi-level learning.'
    },
    'mystery': {
      'toddler': 'Simple hide-and-seek or "where did my toy go?" scenarios.',
      'preschool': 'Gentle mysteries like finding missing socks or discovering who ate the cookies.',
      'early-elementary': 'Age-appropriate mysteries with clues children can follow and solve.',
      'elementary': 'Engaging mysteries with logical reasoning and satisfying revelations.',
      'mixed': 'Create layered mysteries with clues accessible at different complexity levels.'
    },
    'sci-fi': {
      'toddler': 'Simple space themes like visiting the moon or meeting friendly robots.',
      'preschool': 'Include space travel, robot friends, and futuristic but familiar settings.',
      'early-elementary': 'Feature age-appropriate technology and space exploration themes.',
      'elementary': 'Develop science fiction concepts with ethical considerations and wonder.',
      'mixed': 'Balance simple sci-fi elements with more complex technological themes.'
    }
  };

  const themeGuidance = baseThemes[theme as keyof typeof baseThemes];
  const ageGuidance = themeGuidance?.[ageGroup] || 'Create an engaging story appropriate for the theme and age group.';
  
  return ageGuidance;
}

function getAgeAwareLengthGuidance(duration?: string, ageGroup?: string): string {
  const baseLengths = {
    'short': { 'toddler': '30 seconds to 1 minute', 'preschool': '1-2 minutes', 'early-elementary': '1-2 minutes', 'elementary': '2-3 minutes', 'mixed': '1-2 minutes' },
    'medium': { 'toddler': '1-2 minutes', 'preschool': '2-3 minutes', 'early-elementary': '3-4 minutes', 'elementary': '4-5 minutes', 'mixed': '3-4 minutes' },
    'long': { 'toddler': '2-3 minutes', 'preschool': '3-4 minutes', 'early-elementary': '5-6 minutes', 'elementary': '6-8 minutes', 'mixed': '5-7 minutes' }
  };

  const durationKey = duration || 'medium';
  const ageKey = ageGroup || 'mixed';
  const timeGuidance = baseLengths[durationKey as keyof typeof baseLengths]?.[ageKey] || '3-4 minutes';

  return `Appropriate length for ${ageKey} audience: ${timeGuidance} when read aloud at a comfortable pace.`;
}

function getAgeSpecificElements(ageGroup: string, language: string): string {
  const elements = {
    'toddler': {
      'en': '- Use repetitive phrases and predictable patterns\n- Include simple sounds and actions\n- Focus on familiar objects and routines\n- Very short sentences and simple words\n- Repetition for comfort and learning',
      'id': '- Gunakan frasa berulang dan pola yang dapat diprediksi\n- Sertakan suara dan tindakan sederhana\n- Fokus pada objek dan rutinas yang familiar\n- Kalimat sangat pendek dan kata-kata sederhana\n- Pengulangan untuk kenyamanan dan pembelajaran'
    },
    'preschool': {
      'en': '- Include interactive elements (counting, colors, sounds)\n- Use dialogue and character voices\n- Incorporate simple problem-solving\n- Include familiar settings and situations\n- Gentle humor and playfulness',
      'id': '- Sertakan elemen interaktif (menghitung, warna, suara)\n- Gunakan dialog dan suara karakter\n- Masukkan pemecahan masalah sederhana\n- Sertakan setting dan situasi yang familiar\n- Humor lembut dan keceriaan'
    },
    'early-elementary': {
      'en': '- Include mild challenges and solutions\n- Develop character relationships\n- Incorporate learning opportunities\n- Use descriptive but accessible language\n- Include cause and effect relationships',
      'id': '- Sertakan tantangan ringan dan solusi\n- Kembangkan hubungan karakter\n- Masukkan kesempatan belajar\n- Gunakan bahasa deskriptif namun accessible\n- Sertakan hubungan sebab dan akibat'
    },
    'elementary': {
      'en': '- Complex character development and emotions\n- Multiple plot threads that resolve\n- Sophisticated vocabulary and concepts\n- Moral reasoning and ethical choices\n- Rich world-building and detail',
      'id': '- Pengembangan karakter dan emosi yang kompleks\n- Multiple plot threads yang resolve\n- Kosakata dan konsep yang canggih\n- Penalaran moral dan pilihan etis\n- World-building dan detail yang kaya'
    },
    'mixed': {
      'en': '- Layer content for multiple comprehension levels\n- Include both simple and complex elements\n- Use clear language with rich imagery\n- Balance action with reflection\n- Universal themes and emotions',
      'id': '- Layer konten untuk multiple tingkat pemahaman\n- Sertakan elemen sederhana dan kompleks\n- Gunakan bahasa jelas dengan imagery yang kaya\n- Seimbangkan aksi dengan refleksi\n- Tema dan emosi universal'
    }
  };

  return elements[ageGroup]?.[language] || elements.mixed[language] || elements.mixed.en;
}

function getEducationalObjectives(ageGroup: string, language: string): string {
  const objectives = {
    'toddler': {
      'en': 'Basic vocabulary, simple routines, family relationships, and comfort with bedtime',
      'id': 'Kosakata dasar, rutinas sederhana, hubungan keluarga, dan kenyamanan dengan waktu tidur'
    },
    'preschool': {
      'en': 'Social skills, sharing, emotional recognition, basic problem-solving, and friendship',
      'id': 'Keterampilan sosial, berbagi, pengenalan emosi, pemecahan masalah dasar, dan persahabatan'
    },
    'early-elementary': {
      'en': 'Empathy development, cooperation, cultural awareness, basic science concepts, and personal responsibility',
      'id': 'Pengembangan empati, kerjasama, kesadaran budaya, konsep sains dasar, dan tanggung jawab pribadi'
    },
    'elementary': {
      'en': 'Critical thinking, moral reasoning, emotional intelligence, cultural diversity, and personal growth',
      'id': 'Pemikiran kritis, penalaran moral, kecerdasan emosional, keberagaman budaya, dan pertumbuhan pribadi'
    },
    'mixed': {
      'en': 'Universal values, family bonds, kindness, curiosity, and peaceful reflection',
      'id': 'Nilai-nilai universal, ikatan keluarga, kebaikan, rasa ingin tahu, dan refleksi damai'
    }
  };

  return objectives[ageGroup]?.[language] || objectives.mixed[language] || objectives.mixed.en;
}

function getAgeGroupDescription(ageGroup: string, language: string): string {
  const descriptions = {
    'toddler': { 'en': 'Toddlers (ages 2-4)', 'id': 'Balita (usia 2-4 tahun)' },
    'preschool': { 'en': 'Preschoolers (ages 3-5)', 'id': 'Anak prasekolah (usia 3-5 tahun)' },
    'early-elementary': { 'en': 'Early Elementary (ages 5-7)', 'id': 'Sekolah dasar awal (usia 5-7 tahun)' },
    'elementary': { 'en': 'Elementary (ages 6-10)', 'id': 'Sekolah dasar (usia 6-10 tahun)' },
    'mixed': { 'en': 'Mixed age groups (ages 3-10)', 'id': 'Kelompok usia campuran (usia 3-10 tahun)' }
  };

  return descriptions[ageGroup]?.[language] || descriptions.mixed[language] || descriptions.mixed.en;
}

function getConflictComplexity(ageGroup: string): string {
  const conflicts = {
    'toddler': 'very simple situations like finding a lost toy or helping a friend',
    'preschool': 'gentle challenges like sharing toys or solving simple problems',
    'early-elementary': 'mild conflicts that require creativity and cooperation to resolve',
    'elementary': 'meaningful challenges that promote character growth and moral reasoning',
    'mixed': 'layered conflicts that can be understood at different levels'
  };
  
  return conflicts[ageGroup] || conflicts.mixed;
}

function getThematicElements(ageGroup: string): string {
  const themes = {
    'toddler': 'basic concepts like family love, safety, and comfort',
    'preschool': 'friendship, sharing, and simple emotional understanding',
    'early-elementary': 'cooperation, empathy, and problem-solving skills',
    'elementary': 'personal growth, moral choices, and emotional intelligence',
    'mixed': 'universal themes of love, kindness, and belonging'
  };
  
  return themes[ageGroup] || themes.mixed;
}

function getVocabularyGuidance(ageGroup: string): string {
  const vocabulary = {
    'toddler': 'very simple, repetitive words and short sentences',
    'preschool': 'clear, accessible language with some descriptive words',
    'early-elementary': 'age-appropriate vocabulary with occasional new words in context',
    'elementary': 'rich vocabulary that challenges while remaining comprehensible',
    'mixed': 'layered language that works for multiple reading levels'
  };
  
  return vocabulary[ageGroup] || vocabulary.mixed;
}

function getEndingStyle(ageGroup: string): string {
  const endings = {
    'toddler': 'a very peaceful, sleepy conclusion with familiar comfort',
    'preschool': 'a happy, satisfying ending that reinforces positive feelings',
    'early-elementary': 'a thoughtful conclusion that ties together the story\'s lessons',
    'elementary': 'a meaningful resolution that encourages reflection and growth',
    'mixed': 'a universally satisfying ending that provides closure for all ages'
  };
  
  return endings[ageGroup] || endings.mixed;
}

function getMaxTokensForDuration(duration?: string, targetAge?: string): number {
  const ageGroup = getAgeGroup(targetAge);
  
  const tokenLimits = {
    'toddler': {
      'short': 150,   // Very short for toddlers
      'medium': 250,  // Still quite short
      'long': 400     // Longer but manageable
    },
    'preschool': {
      'short': 200,   // Short and sweet
      'medium': 350,  // Moderate length
      'long': 500     // Longer stories
    },
    'early-elementary': {
      'short': 300,   // Standard short
      'medium': 500,  // Good story length
      'long': 700     // Detailed stories
    },
    'elementary': {
      'short': 400,   // More sophisticated short stories
      'medium': 700,  // Rich development
      'long': 1000    // Complex narratives
    },
    'mixed': {
      'short': 300,   // Balanced for all ages
      'medium': 600,  // Standard medium
      'long': 800     // Comprehensive but not overwhelming
    }
  };
  
  const durationKey = duration || 'medium';
  const ageTokens = tokenLimits[ageGroup] || tokenLimits.mixed;
  
  return ageTokens[durationKey as keyof typeof ageTokens] || ageTokens.medium;
}

function generateTemplateStory(storyData: StoryData): string {
  // Fallback template-based generation if OpenAI fails
  const { theme, characters, language } = storyData;
  const mainCharacter = characters[0]?.name || 'Alex';
  const characterNames = characters.map(c => c.name).join(', ');
  
  const templates = {
    en: `Once upon a time, in a magical ${theme} world, there lived a brave and kind character named ${mainCharacter}.

${characterNames ? `Together with their wonderful friends ${characterNames}, ` : ''}${mainCharacter} discovered something truly special that would change their understanding of the world.

As they embarked on their ${theme} journey, ${mainCharacter} learned important lessons about courage, friendship, and believing in themselves. Every challenge they faced only made them stronger and wiser.

The adventure was filled with wonder and discovery, leading to a heartwarming moment where ${mainCharacter} realized that the greatest treasures in life are the friends we make and the kindness we share.

As the stars began to twinkle in the evening sky, ${mainCharacter} felt grateful for their amazing day and drifted off to sleep with a smile, dreaming of tomorrow's possibilities.

And they all lived happily ever after.

The End.`,

    id: `Pada suatu ketika, di dunia ${theme} yang ajaib, hiduplah seorang karakter yang berani dan baik hati bernama ${mainCharacter}.

${characterNames ? `Bersama dengan teman-teman indah mereka ${characterNames}, ` : ''}${mainCharacter} menemukan sesuatu yang benar-benar istimewa yang akan mengubah pemahaman mereka tentang dunia.

Saat mereka memulai perjalanan ${theme} mereka, ${mainCharacter} belajar pelajaran penting tentang keberanian, persahabatan, dan percaya pada diri sendiri. Setiap tantangan yang mereka hadapi hanya membuat mereka lebih kuat dan bijaksana.

Petualangan itu penuh dengan keajaiban dan penemuan, mengarah pada momen yang mengharukan di mana ${mainCharacter} menyadari bahwa harta terbesar dalam hidup adalah teman-teman yang kita buat dan kebaikan yang kita bagikan.

Saat bintang-bintang mulai berkedip di langit malam, ${mainCharacter} merasa bersyukur atas hari yang luar biasa dan tertidur dengan senyuman, bermimpi tentang kemungkinan-kemungkinan hari esok.

Dan mereka semua hidup bahagia selamanya.

Tamat.`
  };

  return templates[language as keyof typeof templates] || templates.en;
}

async function generateAudio(text: string, voice: string): Promise<string> {
  console.log('[Story Generation] Generating audio...');
  
  // Import the TTS service
  const { generateAudio: generateTTS } = await import('./tts-service');
  return await generateTTS(text, voice);
}

async function updateStoryStatus(
  storyId: string, 
  status: string, 
  progress: number, 
  step: string
) {
  const supabase = createServiceRoleClient();
  
  console.log(`[Story Generation] Updating status: ${status} (${progress}%) - ${step}`);
  
  const { error } = await supabase
    .from('stories')
    .update({
      generation_status: status,
      generation_progress: progress,
      current_step: step
    })
    .eq('id', storyId);

  if (error) {
    console.error('[Story Generation] Error updating status:', error);
    throw error;
  }
}

// Utility function to simulate async delays
function delay(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Export for testing purposes
export { generateStoryText, generateAudio, updateStoryStatus };